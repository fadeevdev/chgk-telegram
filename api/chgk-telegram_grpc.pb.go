// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: chgk-telegram.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChgkServiceClient is the client API for ChgkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChgkServiceClient interface {
	WebHook(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*Message, error)
	RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ID, error)
	GetTopPosition(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	GetRandomQuestion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Question, error)
}

type chgkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChgkServiceClient(cc grpc.ClientConnInterface) ChgkServiceClient {
	return &chgkServiceClient{cc}
}

func (c *chgkServiceClient) WebHook(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.ChgkService/WebHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkServiceClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.ChgkService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkServiceClient) RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/api.ChgkService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkServiceClient) GetTopPosition(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.ChgkService/GetTopPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkServiceClient) GetRandomQuestion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/api.ChgkService/GetRandomQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChgkServiceServer is the server API for ChgkService service.
// All implementations must embed UnimplementedChgkServiceServer
// for forward compatibility
type ChgkServiceServer interface {
	WebHook(context.Context, *Message) (*Empty, error)
	SendMessage(context.Context, *SendMessageReq) (*Message, error)
	RegisterUser(context.Context, *User) (*ID, error)
	GetTopPosition(context.Context, *User) (*Empty, error)
	GetRandomQuestion(context.Context, *Empty) (*Question, error)
	mustEmbedUnimplementedChgkServiceServer()
}

// UnimplementedChgkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChgkServiceServer struct {
}

func (UnimplementedChgkServiceServer) WebHook(context.Context, *Message) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebHook not implemented")
}
func (UnimplementedChgkServiceServer) SendMessage(context.Context, *SendMessageReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChgkServiceServer) RegisterUser(context.Context, *User) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedChgkServiceServer) GetTopPosition(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPosition not implemented")
}
func (UnimplementedChgkServiceServer) GetRandomQuestion(context.Context, *Empty) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomQuestion not implemented")
}
func (UnimplementedChgkServiceServer) mustEmbedUnimplementedChgkServiceServer() {}

// UnsafeChgkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChgkServiceServer will
// result in compilation errors.
type UnsafeChgkServiceServer interface {
	mustEmbedUnimplementedChgkServiceServer()
}

func RegisterChgkServiceServer(s grpc.ServiceRegistrar, srv ChgkServiceServer) {
	s.RegisterService(&ChgkService_ServiceDesc, srv)
}

func _ChgkService_WebHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServiceServer).WebHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChgkService/WebHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServiceServer).WebHook(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChgkService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChgkService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServiceServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChgkService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChgkService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServiceServer).RegisterUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChgkService_GetTopPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServiceServer).GetTopPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChgkService/GetTopPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServiceServer).GetTopPosition(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChgkService_GetRandomQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServiceServer).GetRandomQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChgkService/GetRandomQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServiceServer).GetRandomQuestion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChgkService_ServiceDesc is the grpc.ServiceDesc for ChgkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChgkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ChgkService",
	HandlerType: (*ChgkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebHook",
			Handler:    _ChgkService_WebHook_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChgkService_SendMessage_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _ChgkService_RegisterUser_Handler,
		},
		{
			MethodName: "GetTopPosition",
			Handler:    _ChgkService_GetTopPosition_Handler,
		},
		{
			MethodName: "GetRandomQuestion",
			Handler:    _ChgkService_GetRandomQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chgk-telegram.proto",
}
